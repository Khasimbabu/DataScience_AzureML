Introduction to the Azure Machine Learning SDK
========================================
***********************************************

Azure Machine Learning provides a cloud-based platform for training, deploying, and managing machine learning models.

Azure Machine Learning is a platform for operating machine learning workloads in the cloud.

Azure Machine Learning
*******************************
Built on the Microsoft Azure cloud platform, Azure Machine Learning enables you to manage:

	Scalable on-demand compute for machine learning workloads.
	Data storage and connectivity to ingest data from a wide range sources.
	Machine learning workflow orchestration to automate model training, deployment, and management processes.
	Model registration and management, so you can track multiple versions of models and the data on which they were trained.
	Metrics and monitoring for training experiments, datasets, and published services.
	Model deployment for real-time and batch inferencing.
	
A workspace is a context for the experiments, data, compute targets, and other assets associated with a machine learning workload.

Workspaces for Machine Learning Assets
******************************************
A workspace defines the boundary for a set of related machine learning assets. You can use workspaces to group machine learning assets based on projects, deployment environments (for example, test and production), teams, or some other organizing principle. The assets in a workspace include:

Compute targets for development, training, and deployment.
Data for experimentation and model training.
Notebooks containing shared code and documentation.
Experiments, including run history with logged metrics and outputs.
Pipelines that define orchestrated multi-step processes.
Models that you have trained.

Workspaces as Azure Resources
********************************
Workspaces are Azure resources, and as such they are defined within a resource group in an Azure subscription, along with other related Azure resources that are required to support the workspace.

The Azure resources created alongside a workspace include:

A storage account - used to store files used by the workspace as well as data for experiments and model training.
An Application Insights instance, used to monitor predictive services in the workspace.
An Azure Key Vault instance, used to manage secrets such as authentication keys and credentials used by the workspace.
A container registry, created as-needed to manage containers for deployed models.

Role-Based Access Control
******************************
You can assign role-based authorization policies to a workspace, enabling you to manage permissions that restrict what actions specific Azure Active Directory (AAD) principals can perform. For example, you could create a policy that allows only users in the IT Operations group to create compute targets and datastores, while allowing users in the Data Scientists group to create and run experiments and register models.

Creating a Workspace
*************************
You can create a workspace in any of the following ways:

In the Microsoft Azure portal, create a new Machine Learning resource, specifying the subscription, resource group and workspace name.
Use the Azure Machine Learning Python SDK to run code that creates a workspace. For example, the following code creates a workspace named aml-workspace (assuming the Azure ML SDK for Python is installed and a valid subscription ID is specified):
>>>>>>>>>>>>>>>>>
from azureml.core import Workspace
    
    ws = Workspace.create(name='aml-workspace', 
                      subscription_id='123456-abc-123...',
                      resource_group='aml-resources',
                      create_resource_group=True,
                      location='eastus'
                     )
>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use the Azure Command Line Interface (CLI) with the Azure Machine Learning CLI extension. For example, you could use the following command (which assumes a resource group named aml-resources has already been created):

az ml workspace create -w 'aml-workspace' -g 'aml-resources'

>>>>>>>>>>>>>>>>>>>>>>>>

Azure Machine Learning studio is a web-based tool for managing an Azure Machine Learning workspace. It enables you to create, manage, and view all of the assets in your workspace and provides the following graphical tools:

	Designer: A drag and drop interface for "no code" machine learning model development.
	
	Automated Machine Learning: A wizard interface that enables you to train a model using a combination of algorithms and data preprocessing techniques to find the best model for your data.

>>>>>>>>>>>>>>>>>>>>>

The Azure Machine Learning SDK
***********************************
While graphical interfaces like Azure Machine Learning studio make it easy to create and manage machine learning assets, it is often advantageous to use a code-based approach to managing resources. By writing scripts to create and manage resources, you can:

Run machine learning operations from your preferred development environment.
Automate asset creation and configuration to make it repeatable.
Ensure consistency for resources that must be replicated in multiple environments (for example, development, test, and production)
Incorporate machine learning asset configuration into developer operations (DevOps) workflows, such as continuous integration / continuous deployment (CI/CD) pipelines.

Azure Machine Learning provides software development kits (SDKs) for Python and R, which you can use to create, manage, and use assets in an Azure Machine Learning workspace.

Installing the Azure Machine Learning SDK for Python
------------------------------------------------------
You can install the Azure Machine Learning SDK for Python by using the pip package management utility, as shown in the following code sample:

pip install azureml-sdk

The SDK includes optional extras that aren't required for core operations, but can be useful in some scenarios. For example, the notebooks extra include widgets for displaying detailed output in Jupyter Notebooks, the AutoML extra includes packages for automated machine learning training, and the explain extra includes packages for generating model explanations. To install extras, specify them in brackets as shown here:

pip install azureml-sdk[notebooks,automl,explain]

Connecting to a Workspace
****************************
After installing the SDK package in your Python environment, you can write code to connect to your workspace and perform machine learning operations. The easiest way to connect to a workspace is to use a workspace configuration file, which includes the Azure subscription, resource group, and workspace details as shown here:

{
    "subscription_id": "1234567-abcde-890-fgh...",
    "resource_group": "aml-resources",
    "workspace_name": "aml-workspace"
}

--> You can download a configuration file for a workspace from the Overview page of its blade in the Azure portal or from Azure Machine Learning studio.

To connect to the workspace using the configuration file, you can use the from_config method of the Workspace class in the SDK, as shown here:

from azureml.core import Workspace
ws = Workspace.from_config()

By default, the from_config method looks for a file named config.json in the folder containing the Python code file, but you can specify another path if necessary.

As an alternative to using a configuration file, you can use the get method of the Workspace class with explicitly specified subscription, resource group, and workspace details as shown here - though the configuration file technique is generally preferred due to its greater flexibility when using multiple scripts:

from azureml.core import Workspace
ws = Workspace.get(name='aml-workspace',
                   subscription_id='1234567-abcde-890-fgh...',
                   resource_group='aml-resources')

Working with the Workspace Class
***********************************
The Workspace class is the starting point for most code operations. For example, you can use its compute_targets attribute to retrieve a dictionary object containing the compute targets defined in the workspace, like this:

for compute_name in ws.compute_targets:
    compute = ws.compute_targets[compute_name]
    print(compute.name, ":", compute.type)

The SDK contains a rich library of classes that you can use to create, manage, and use many kinds of asset in an Azure Machine Learning workspace.

The Azure Machine Learning CLI Extension
**********************************************
The Azure command-line interface (CLI) is a cross-platform command-line tool for managing Azure resources. The Azure Machine Learning CLI extension is an additional package that provides commands for working with Azure Machine Learning.

To install the Azure Machine Learning CLI extension, you must first install the Azure CLI. See the full installation instructions for all supported platforms for more details.

After installing the Azure CLI, you can add the Azure Machine Learning CLI extension by running the following command:

az extension add -n azure-cli-ml

To use the Azure Machine Learning CLI extension, run the az ml command with the appropriate parameters for the action you want to perform. For example, to list the compute targets in a workspace, run the following command:

az ml computetarget list -g 'aml-resources' -w 'aml-workspace'

In the code sample above, the -g parameter specifies the name of the resource group in which the Azure Machine Learning workspace specified in the -w parameter is defined. These parameters are shortened aliases for --resource-group and --workspace-name.

Compute Instances
***********************
Azure Machine Learning includes the ability to create Compute Instances in a workspace to provide a development environment that is managed with all of the other assets in the workspace.































